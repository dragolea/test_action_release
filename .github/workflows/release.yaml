name: Release on PR merge"
on:
  pull_request:
    branches:
      - dev
    types:
      - closed

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: Release new version
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package-version.outputs.current-version }}

    steps:
      - name: Check labels to proceed versioning
        id: proceed-versioning
        if: >
          contains(github.event.pull_request.labels.*.name, 'version: patch') ||
          contains(github.event.pull_request.labels.*.name, 'version: minor') ||
          contains(github.event.pull_request.labels.*.name, 'version: major')
        run: echo "Proceed versioning"

      - name: Checkout code
        id: code-checkout
        if: steps.proceed-versioning.conclusion == 'success'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js 20.x
        id: setup-node
        if: steps.code-checkout.conclusion == 'success'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        id: install-dependencies
        if: steps.setup-node.conclusion == 'success'
        run: |
          sudo apt-get install -y jq
          npm install @dxfrontier/sync-mta-version

      - name: Determine version bump type
        id: version-bump-type
        if: steps.install-dependencies.conclusion == 'success'
        env:
          IS_PATCH_FOUND: "${{ contains(github.event.pull_request.labels.*.name, 'version: patch') }}"
          IS_MINOR_FOUND: "${{ contains(github.event.pull_request.labels.*.name, 'version: minor') }}"
          IS_MAJOR_FOUND: "${{ contains(github.event.pull_request.labels.*.name, 'version: major') }}"
        run: |
          if [ "${IS_PATCH_FOUND}" == "true" ]; then
            echo "VERSION_BUMP=patch" >> $GITHUB_ENV
            echo "Version: patch"
          elif [ "${IS_MINOR_FOUND}" == "true" ]; then
            echo "VERSION_BUMP=minor" >> $GITHUB_ENV
            echo "Version: minor"
          elif [ "${IS_MAJOR_FOUND}" == "true" ]; then
            echo "VERSION_BUMP=major" >> $GITHUB_ENV
            echo "Version: major"
          else
            exit 0
          fi

      - name: Apply version bump to package.json
        id: update-package-version
        if: >
          steps.version-bump-type.conclusion == 'success' &&
          env.VERSION_BUMP
        run: |
          # Update the root package.json version
          npm version ${{ env.VERSION_BUMP }} --no-git-tag-version

          # Find all package.json files in ./app subfolders and update their versions
          for file in ./app/*/package.json; do
            if [ -f "$file" ]; then
              npm version ${{ env.VERSION_BUMP }} --no-git-tag-version --prefix "$(dirname "$file")"
            fi
          done

      - name: Retrieve updated npm version
        id: package-version
        if: steps.update-package-version.conclusion == 'success'
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Apply version bump to mta.yaml & *.mtaext
        id: update-mta-version
        if: steps.package-version.conclusion == 'success'
        run: npx sync-mta-version -f mta.yaml

      - name: Apply version bump to manifest.json
        id: update-manifest-version
        if: steps.update-mta-version.conclusion == 'success'
        run: |
          for file in ./app/*/webapp/manifest.json; do
            if [ -f "$file" ]; then
              jq '.["sap.app"]["applicationVersion"]["version"] = "${{ steps.package-version.outputs.current-version }}"' "$file" > tmp.json && mv tmp.json "$file"
            fi
          done

      - name: Push git tag
        id: tag
        if: steps.update-manifest-version.conclusion == 'success'
        uses: anothrNick/github-tag-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: false
          CUSTOM_TAG: ${{ steps.package-version.outputs.current-version }}
          BRANCH_HISTORY: full

      # Generate the changelog file using the configuration from cliff.toml.
      - name: Generate CHANGELOG.md partial
        id: git-cliff-partial
        if: steps.tag.conclusion == 'success'
        uses: orhun/git-cliff-action@v3
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}

      # Create a GitHub release using the generated changelog content.
      - name: Publish GitHub Release
        id: create-release
        if: steps.git-cliff-partial.conclusion == 'success'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ steps.git-cliff-partial.outputs.content }}
          tag_name: ${{ steps.git-cliff-partial.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          draft: false
          make_latest: true

      # Generate the changelog file based on the cliff.toml file
      - name: Generate CHANGELOG.md
        id: git-cliff
        if: steps.create-release.conclusion == 'success'
        uses: orhun/git-cliff-action@v3
        with:
          config: cliff.toml
          args: --verbose
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}

      # Move the generated changelog to the root folder and clean up.
      - name: Move CHANGELOG.md to root directory
        id: move-log
        if: steps.git-cliff.conclusion == 'success'
        run: |
          cp ./git-cliff/CHANGELOG.md ./
          rm ./git-cliff/CHANGELOG.md
          rmdir ./git-cliff/

      - name: Create pull request
        id: create-pull-request
        if: steps.move-log.conclusion == 'success'
        uses: peter-evans/create-pull-request@v5
        with:
          branch: feature-version-bump
          title: 'chore: update version and changelog'
          body: 'This PR updates the version and changelog.'
          base: dev
          labels: deploy

      # - name: Approve the PR
      #   id: approve-pr
      #   if: steps.create-pull-request.conclusion == 'success'
      #   uses: hmarr/auto-approve-action@v4
      #   with:
      #     github-token: ${{ secrets.AUTO_APPROVE }}
      #     pull-request-number: ${{ steps.create-pull-request.outputs.pull-request-number  }}

      # - name: Enable auto-merge
      #   id: auto-merge
      #   if: steps.approve-pr.conclusion == 'success'
      #   uses: peter-evans/enable-pull-request-automerge@v2
      #   with:
      #     token: ${{ secrets.AUTO_APPROVE }}
      #     pull-request-number: ${{ needs.create-pull-request.outputs.pull-request-number }}
